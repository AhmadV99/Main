print("\n")

print("Executor Vulnerability Check - Executor: " .. tostring(identifyexecutor()))
print("✅ - Pass, ⛔ - Fail, ⏺️ - Unknown, ❌ - No Functions Exist")
local pass, fail, unknown, NoFuncExist = 0, 0, 0, 0
local function Test(v, v1)
  task.spawn(function()
    local Success, Error = pcall(function() game:GetService(v)[v1]() end)
    if Error == "Argument 1 missing or nil" then
      fail += 1
      warn(" ⛔ : " .. v1)
    else
      pass += 1
      print(" ✅ : " .. v1)
      getfenv().blockfunc = Instance.new("DataStoreIncrementOptions")
      blockfunc:SetMetadata({ func = ' game:GetService("' .. v .. '"):' .. v1 .. '()' })
    end
  end)
  task.wait()
end
local function Print(service)
  print(' ---- [ ' .. service .. ' ] ----- ')
end
local function Assert(Func, Name)
  local s, e = pcall(Func)
  if not s then
    fail += 1
    warn(" ⛔ : " .. Name .. " | Error: " .. e)
  else
    pass += 1
    print(" ✅ : " .. Name)
  end
  task.wait()
end
local Services = {
    HttpRbxApiService = {"PostAsync", "PostAsyncFullUrl", "GetAsync", "GetAsyncFullUrl", "RequestAsync", "AddCoreScriptLocal", "EmitHybridEvent"},
    BrowserService = {"ExecuteJavaScript", "OpenBrowserWindow", "OpenNativeOverlay", "ReturnToJavaScript", "SendCommand"},
    MarketplaceService = {"GetRobuxBalance", "PerformPurchase", "PerformPurchaseV2", "PromptBundlePurchase", "PromptGamePassPurchase", "PromptProductPurchase", "PromptPurchase", "PromptRobloxPurchase", "PromptThirdPartyPurchase"},
    HttpService = {"RequestInternal"},
    GuiService = {"RequestInternal", "OpenBrowserWindow", "OpenNativeOverlay"},
    OpenCloudService = {"HttpRequestAsync"},
    CoreGui = {"TakeScreenshot", "ToggleRecording"},
    MessageBusService = {"Call", "GetLast", "GetMessageId", "GetProtocolMethodRequestMessageId", "GetProtocolMethodResponseMessageId", "MakeRequest", "Publish", "PublishProtocolMethodRequest", "PublishProtocolMethodResponse", "Subscribe", "SubscribeToProtocolMethodRequest", "SubscribeToProtocolMethodResponse"},
    DataModel = {"Load", "OpenScreenshotsFolder"},
    OmniRecommendationsService = {"MakeRequest"},
    Players = {"ReportAbuse", "ReportAbuseV3"},
}
for i, v in pairs(Services) do
  Print(i)
  for _, v in ipairs(v) do
    Test(i, v)
  end
end
Print("Custom HTTP Functions")
task.spawn(function()
  local s, e = pcall(function() getgenv().REQUEST_RESULT = request({ Url = "https://economy.roblox.com/v1/user/currency", Method = "GET" }) end)
  if e == ":1: attempt to call a nil value" then
    unknown += 1
    print(" ⏺️ request (Executor does not support request function)")
      task.wait(9e9)
  end
  if not s then
    pass += 1
    print(" ✅ request | Function call went error: " .. tostring(e))
    task.wait(9e9)
  end
  local str = tostring(REQUEST_RESULT.Body)
  local pattern = '^{"robux":'
  local st, en = string.find(str, pattern)
  if st == 1 then
    fail += 1
    warn(" ⛔ request | Robux API Output: " .. str)
  else
    pass += 1
    print(" ✅ request")
  end
end)
task.wait(0.3)
task.spawn(function()
  local s, e = pcall(function() getgenv().GAME_HTTPGET_RESULT = game:HttpGet("https://economy.roblox.com/v1/user/currency") end)
  if e == ":1: attempt to call a nil value" then
    unknown += 1
    print(" ⏺️ game:HttpGet (Executor does not support game:HttpGet function)")
      task.wait(9e9)
  end
  if not s then
    pass += 1
    print(" ✅ game:HttpGet | Function call went error: " .. tostring(e))
    task.wait(9e9)
  end
  local str = tostring(GAME_HTTPGET_RESULT)
  local pattern = '^{"robux":'
  local st, en = string.find(str, pattern)
  if st == 1 then
    fail += 1
    warn(" ⛔ game:HttpGet | Robux API Output: " .. str)
  else
    pass += 1
    print(" ✅ game:HttpGet")
  end
end)
Print("Debug Library")
if debug.getstack then
  Assert(function() debug.getstack(1, 0) end, "debug.getstack(1, 0)")
  Assert(function() debug.getstack(1, -1) end, "debug.getstack(1, -1)")
  Assert(function() local size = #debug.getstack(1); debug.getstack(1, size + 1) end, "debug.getstack size check")
  if newcclosure then
    Assert(function() newcclosure(function() debug.getstack(2, 1) end)() end, "debug.getstack from C functions")
  end
else
  print(" ❌ : debug.getstack has doesn't exist functions")
  NoFuncExist += 1
end
if debug.setstack then
  Assert(function() debug.setstack(1, 0, nil) end, "debug.setstack(1, 0, nil)")
  Assert(function() debug.setstack(1, -1, nil) end, "debug.setstack(1, -1, nil)")
  Assert(function() local size = #debug.getstack(1); debug.setstack(1, size + 1, "") end, "debug.setstack size check")
  if newcclosure then
    Assert(function() newcclosure(function() debug.setstack(2, 1, nil) end)() end, "debug.setstack from C functions")
  end
  Assert(function() local a = 1 debug.setstack(1, 1, true) print(a) end, "debug.setstack type check")
else
  print(" ❌ : debug.setstack has doesn't exist functions")
  NoFuncExist += 1
end

if debug.getupvalues and debug.getupvalue and debug.setupvalue then
  Assert(function() debug.getupvalues(-1) end, "debug.getupvalues(-1)")
  Assert(function() debug.getupvalue(-1, 1) end, "debug.getupvalue(-1, 1)")
  Assert(function() debug.getupvalue(function() end, 2) end, "debug.getupvalue bounds check")
  Assert(function() debug.setupvalue(function() end, -1, nil) end, "debug.setupvalue(-1, nil)")
  Assert(function() debug.setupvalue(function() end, 2, nil) end, "debug.setupvalue bounds check")
  Assert(function() debug.setupvalue(game.GetChildren, 1, nil) end, "debug.setupvalue C function check")
else 
  print(" ❌ : debug.getupvalues, debug.getupvalue, debug.setupvalue has doesn't exist functions")
  NoFuncExist += 1
end

if debug.getprotos then
  local function a()
    local function b() return 123 end
    b()
  end
  Assert(function() debug.getprotos(-1) end, "debug.getprotos(-1)")
  Assert(function() debug.getprotos(coroutine.wrap(function() end)) end, "debug.getprotos C function check")
  local protos = debug.getprotos(a)
  if #protos == 0 then
    fail += 1
    warn(" ⛔ : debug.getprotos is returning an invalid amount of prototypes")
  else
    pass += 1
    print(" ✅ : debug.getprotos")
    local _, result = pcall(function() return protos[1]() end)
    if result == 123 then
      fail += 1
      warn(" ⛔ debug.getprotos allows calling the resulting function")
    else
      pass += 1
      print(" ✅ : debug.getprotos call check")
    end
  end
else
  print(" ❌ : debug.getprotos has doesn't exist functions")
  NoFuncExist += 1
end

if debug.getproto then
  local function a()
    local function b() return 123 end
    b()
  end
  Assert(function() debug.getproto(-1, 1) end, "debug.getproto(-1, 1)")
  Assert(function() debug.getproto(coroutine.wrap(function() end), 1) end, "debug.getproto C function check")
  local proto = debug.getproto(a, 1)
  local _, result = pcall(function() return proto() end)
  if result == 123 then
    fail += 1
    warn(" ⛔ : debug.getproto allows calling the resulting function")
  else
    pass += 1
    print(" ✅ : debug.getproto call check")
  end
else
  print(" ❌ : debug.getproto has doesn't exist functions")
  NoFuncExist += 1
end

if debug.getprotos then
  local function a()
    local function b() return 123 end
    b()
  end
  Assert(function() debug.getprotos(a) end, "debug.getprotos(a)")
  local protos = debug.getprotos(a)
  if #protos == 0 then
    fail += 1
    warn(" ⛔ : debug.getprotos is returning an invalid amount of prototypes")
  else
    pass += 1
    print(" ✅ : debug.getprotos")
    local _, result = pcall(function() return protos[1]() end)
    if result == 123 then
      fail += 1
      warn(" ⛔ : debug.getprotos allows calling the resulting function")
      else
        pass += 1
        print(" ✅ : debug.getprotos call check")
      end
    end
  else
  print(" ❌ : debug.getprotos has doesn't exist functions")
  NoFuncExist += 1
end
task.wait(2.5)
local rate = math.round(pass / (pass + fail + unknown) * 100)
local outOf = pass .. " out of " .. (pass + fail + unknown)
print("\n")
print("Vulnerability Check - " .. tostring(identifyexecutor()))
print("✅ Tested with a " .. rate .. "% vulnerability mitigations rate (" .. outOf .. ")")
print("⛔ " .. fail .. " Vulnerabilities not mitigated")
print("⏺️ " .. unknown .. " Vulnerabilities not tested")
print("❌ - " .. NoFuncExist .. " No Functions Exist")
