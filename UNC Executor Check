local passes, fails, undefined = 0, 0, 0
local TestR = {}
local RunService = game:GetService("RunService")

local function GetGB(Path)
  local value = getgenv() or _G or getfenv(0)
  local Str = Path
  while value ~= nil and Str ~= "" do
    local Name, Next = Str:match("^([^.]+)%.?(.*)$")
    value = value[Name]
    Str = Next
  end
  return value
end

local function isEqual(VAL, VAL1)
  if VAL == VAL1 then return true end
  local uniqueTypes = {["function"] = true, ["table"] = true,["userdata"] = true,["thread"] = true}
  for Index, Value in pairs(VAL) do
    if uniqueTypes[type(Value)] then
      if type(VAL1[Index]) ~= type(Value) then
        return false
      end
    elseif VAL1[Index] ~= Value then
      return false
    end
  end
  for Index, Value in pairs(VAL1) do
    if uniqueTypes[type(Value)] then
      if type(VAL[Index]) ~= type(Value) then
        return false
      end
    elseif VAL[Index] ~= Value then
      return false
    end
  end
  return true
end


local function test(name, callback)
  task.spawn(function()
    if not callback and GetGB(name) then
      passes += 1
      print("✅ " .. name .. (message and " - " .. message or ""))
    elseif not GetGB(name) then
      fails += 1
      warn("⛔ " .. name)
    else
      local success, message = pcall(callback)
      if success then
        passes += 1
        print("✅ " .. name .. (message and " - " .. message or ""))
      else
        fails += 1
        warn("⛔ " .. name .. " failed: " .. message)
      end
    end
  end)
end

local function Print(Name)
  return print(' ----- [ ' .. Name .. ' ] ----- ')
end

Print("Cache")

test("cache.invalidate", function()
  local Con, Cach = Instance.new("Folder"), Con:FindFirstChild("Part")

  cache.invalidate(Cach)
  assert(Instance.new("Part", Con) ~= Cach, "The Reference to [ Part ] was not successfully invalidated")
end)

test("cache.iscached", function()
  local part = Instance.new("Part")

  assert(cache.iscached(part), "Part should be cached")
  cache.invalidate(part)
  assert(not cache.iscached(part), "Part should not be cached after invalidation")
end)

test("cache.replace", function()
  local Part = Instance.new("Part")
  local Replacement = Instance.new("Fire")

  cache.replace(Part, Replacement)
  assert(Part == Replacement, "Part was not replaced with Fire instance")
end)

test("compareinstances", function()
  local cloneref = cloneref or function(agrs) return agrs:clone() end

  local Part = Instance.new("Part")
  local Cloned = cloneref(Part)

  assert(Part ~= Cloned, "Cloned instance should not be identical to the Part")
  assert(compareInstances(Part, Cloned), "Cloned instance should be equivalent to the Part according to compareInstances()")
end)

Print("Closures")

test("checkcaller", function()
  assert(checkCaller(), "Main scope should return true")
end)

test("clonefunction", function()
  local function Check()return "success"end

	local CloneFunc = clonefunction(Check)

	assert(Check() == CloneFunc(), "The clonefunction should return the same value as the original")
	assert(Check ~= CloneFunc, "The clonefunction should not reference the original function")
end)

test("getcallingscript")

test("getscriptclosure", function()
  local module = game:GetService("CoreGui").RobloxGui.Modules.Common.Constants
  local constants, generated = getrenv().require(module), getscriptclosure(module)()

  assert(constants ~= generated, "The generated module does not match the original")
  assert(isEqual(constants, generated), "The generated constant table is not shallow equal to the original")
end)

test("hookfunction", function()
  local function test()return true end
  local reference = hookfunction(test, function()
    return false
  end)

  assert(test() == false, "The function should return false")
  assert(reference() == true, "The hookfunction function should return true")
  assert(test ~= reference, "The hookfunction function should not be the same as the reference")
end)

test("iscclosure", function()
  assert(iscclosure(print) == true, "Function 'print' should be a C closure")
  assert(iscclosure(function() end) == false, "Executor function should not be a C closure")
end)

test("islclosure", function()
  assert(islclosure(print) == false, "Function 'print' should not be a Lua closure")
  assert(islclosure(function() end) == true, "Executor function should be a Lua closure")
end)

test("isexecutorclosure", function()
  local isexe = isexecutorclosure

  assert(isexe(isexe) == true, "Did not return true for an executor global")
  assert(isexe(newcclosure(function() end)) == true, "Did not return true for an executor C closure")
  assert(isexe(function() end) == true, "Did not return true for an executor Luau closure")
  assert(isexe(print) == false, "Did not return false for a Roblox global")
end)

test("loadstring", function()
  local animate = game:GetService("Players").LocalPlayer.Character:WaitForChild("Animate")
  local bytecode = getscriptbytecode(animate)

  local func, err = loadstring(bytecode)
  assert(not func, "Luau bytecode should not be loadable!")

  local mathFunc, mathErr = loadstring("return... + 1")
  assert(mathFunc and mathFunc(1) == 2, "Failed to do simple math: ".. tostring(mathErr))

  local errFunc, errErr = loadstring("f")
  assert(errErr and type(errErr) == "string", "Loadstring did not return an error for a compiler error")
end)

test("newcclosure")

test("newlclosure")

Print("Console")

test("rconsoleclear")
test("rconsolecreate")
test("rconsoledestroy")
test("rconsoleinput")
test("rconsoleprint")
test("rconsolesettitle")
test("rconsoleinfo")
test("rconsolewarn")
test("rconsoleerr")
test("rconsolename")
test("rconsoleclose")

Print("Crypt")

test("crypt.base64encode")
test("crypt.base64decode")
test("crypt.encrypt")
test("crypt.decrypt")
test("crypt.generatebytes")
test("crypt.generatekey")
test("crypt.hash")
test("crypt.hex")

Print("Debug")

test("debug.getconstant")
test("debug.getconstants")
test("debug.getinfo")
test("debug.getproto")
test("debug.getprotos")
test("debug.getstack")
test("debug.getupvalue")
test("debug.getupvalues")
test("debug.setconstant")
test("debug.setstack")
test("debug.setupvalue")
test("debug.isvalidlevel")

Print("No Debug")

test("getconstant")
test("getconstants")
test("getinfo")
test("getproto")
test("getprotos")
test("getstack")
test("getupvalue")
test("getupvalues")
test("setconstant")
test("setstack")
test("setupvalue")
test("isvalidlevel")

Print("File System")

test("readfile")
test("listfiles")
test("writefile")
test("makefolder")
test("appendfile")
test("isfile")
test("isfolder")
test("delfolder")
test("delfile")
test("loadfile")
test("dofile")
test("zip_inflate")

Print("Input")

test("isrbxactive")
test("mouse1click")
test("mouse1press")
test("mouse1release")
test("mouse2click")
test("mouse2press")
test("mouse2release")
test("mousemoveabs")
test("mousemoverel")
test("mousescroll")
test("keyrelease")
test("keypress")
test("mouse1up")
test("mouse2up")

Print("Instances")

test("fireclickdetector")
test("getcallbackvalue")
test("getconnections")
test("getcustomasset")
test("gethiddenproperty")
test("sethiddenproperty")
test("gethui")
test("getinstances")
test("getinstancecache")
test("getnilinstances")
test("isscriptable")
test("setscriptable")
test("setrbxclipboard")

Print("Metatable")

test("getrawmetatable")
test("hookmetamethod")
test("getnamecallmethod")
test("isreadonly")
test("setrawmetatable")
test("setreadonly")
test("setmetatable")

Print("Miscellaneous")

test("identifyexecutor")
test("lz4compress")
test("lz4decompress")
test("messagebox")
test("queue_on_teleport")
test("request")
test("syn.request")
test("http_request")
test("HttpPost")
test("syn")
test("setclipboard")
test("getclipboard")
test("setfpscap")
test("setfflag")
test("getspecialinfo")
test("cloneref")
test("setparentinternal")
test("addchildinternal")
test("isluau")
test("run_secure")
test("getnetworkmode")
test("setnetworkmode")

Print("Scripts")

test("getgc")
test("getgenv")
test("getloadedmodules")
test("getrenv")
test("getrunningscripts")
test("getscriptbytecode")
test("getscripthash")
test("getscripts")
test("getsenv")
test("getregistry")
test("getthreadidentity")
test("setthreadidentity")
test("getfenv")
test("setfenv")

Print("Drawing")

test("Drawing")
test("Drawing.new")
test("Drawing.Fonts")
test("Drawing.clear")
test("isrenderobj")
test("getrenderproperty")
test("setrenderproperty")
test("cleardrawcache")
test("WebSocket")
test("WebSocket.connect")

Print("Http")

test("game:httpGet")
test("game:HttpGetAsync")
test("game.HttpGetAsync")
test("game.httpGet")

Print("Instance Saving")

test("saveinstance")
test("decompile")

Print("Other")

test("game")
test("Game")
test("clonefunction")
test("getcallbackmember")
test("restorefunction")
test("isfunctionhooked")
test("firesignal")
test("require")
test("getallthreads")
test("getfpscap")
test("fireproximityprompt")
test("firetouchtransmitter")
test("getproperties")
test("gethiddenproperties")
test("getexecutioncontext")
test("protect_gui")
test("securecall")
test("emulate_call")
test("writecustomasset")
test("rawget")
test("unprotect_gui")
test("firetouchinterest")
test("setsimulationradius")
test("getthreadcontext")
test("setthreadcontext")
test("getmoduleunlocked")
test("setmoduleunlocked")
test("run_auto_execute_scripts")
test("run_teleport_queue_scripts")
test("assign_socket")
test("send_socket")
test("close_socket")

Print("FPS")

local function getFPS()
  local St = tick()
  local Count = 0
  RunService.RenderStepped:Wait()
  local en = tick()
  while tick() - St < 1 do
    Count += 1
    RunService.RenderStepped:Wait()
  end
  return math.floor(Count / (en - St) + 0.5)
end

print("FPS: " .. getFPS() .. "/60")

local rate = math.round(passes / (passes + fails) * 100)
local outOf = passes .. " out of " .. (passes + fails)

print("\n")

print("Cubical Executor Functions")
print("✅ Tested with a " .. rate .. "% success rate (" .. outOf .. ")")
print("⛔ " .. fails .. " tests failed")
