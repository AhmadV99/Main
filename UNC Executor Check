local passes, fails, undefined = 0, 0, 0
local TestR = {}

local function GetGB(Path)
    local value = getgenv() or _G or getfenv(0)
    local Str = Path
    while value ~= nil and Str ~= "" do
        local Name, Next = Str:match("^([^.]+)%.?(.*)$")
        value = value[Name]
        Str = Next
    end
    return value
end

local function test(Code)
    task.spawn(function()
        local Start = os.clock()
        local Success, Error = pcall(function() return GetGB(Code) ~= nil end)
        local endT = os.clock()
        local dura = endT - Start
        if Success and Error then
            passes += 1
            print(string.format("✅ %s (%.2f ms)", Code, dura * 1000))
            table.insert(TestR, {code = Code, result = "pass", message = string.format("Duration: %.2f ms", dura * 1000)})
        else
            fails += 1
            warn("⛔ " .. Code)
        end
    end)
    task.wait()
end

local function Print(Name)
    return print(' ----- [ ' .. Name .. ' ] ----- ')
end

Print("Cache")

test("cache.invalidate")
test("cache.iscached")
test("cache.replace")
test("compareinstances")

Print("Closures")

test("checkcaller")
test("clonefunction")
test("getcallingscript")
test("getscriptclosure")
test("hookfunction")
test("hookfunc")
test("iscclosure")
test("islclosure")
test("isexecutorclosure")
test("loadstring")
test("newcclosure")
test("newlclosure")

Print("Console")

test("rconsoleclear")
test("rconsolecreate")
test("rconsoledestroy")
test("rconsoleinput")
test("rconsoleprint")
test("rconsolesettitle")
test("rconsoleinfo")
test("rconsolewarn")
test("rconsoleerr")
test("rconsolename")
test("rconsoleclose")

Print("Crypt")

test("crypt.base64encode")
test("crypt.base64decode")
test("crypt.encrypt")
test("crypt.decrypt")
test("crypt.generatebytes")
test("crypt.generatekey")
test("crypt.hash")
test("crypt.hex")

Print("Debug")

test("debug.getconstant")
test("debug.getconstants")
test("debug.getinfo")
test("debug.getproto")
test("debug.getprotos")
test("debug.getstack")
test("debug.getupvalue")
test("debug.getupvalues")
test("debug.setconstant")
test("debug.setstack")
test("debug.setupvalue")
test("debug.isvalidlevel")

Print("No Debug")

test("getconstant")
test("getconstants")
test("getinfo")
test("getproto")
test("getprotos")
test("getstack")
test("getupvalue")
test("getupvalues")
test("setconstant")
test("setstack")
test("setupvalue")
test("isvalidlevel")

Print("File System")

test("readfile")
test("listfiles")
test("writefile")
test("makefolder")
test("appendfile")
test("isfile")
test("isfolder")
test("delfolder")
test("delfile")
test("loadfile")
test("dofile")
test("zip_inflate")

Print("Input")

test("isrbxactive")
test("mouse1click")
test("mouse1press")
test("mouse1release")
test("mouse2click")
test("mouse2press")
test("mouse2release")
test("mousemoveabs")
test("mousemoverel")
test("mousescroll")
test("keyrelease")
test("keypress")
test("mouse1up")
test("mouse2up")

Print("Instances")

test("fireclickdetector")
test("getcallbackvalue")
test("getconnections")
test("getcustomasset")
test("gethiddenproperty")
test("sethiddenproperty")
test("gethui")
test("getinstances")
test("getinstancecache")
test("getnilinstances")
test("isscriptable")
test("setscriptable")
test("setrbxclipboard")

Print("Metatable")

test("getrawmetatable")
test("hookmetamethod")
test("getnamecallmethod")
test("isreadonly")
test("setrawmetatable")
test("setreadonly")
test("setmetatable")

Print("Miscellaneous")

test("identifyexecutor")
test("lz4compress")
test("lz4decompress")
test("messagebox")
test("queue_on_teleport")
test("request")
test("syn.request")
test("http_request")
test("HttpPost")
test("syn")
test("setclipboard")
test("getclipboard")
test("setfpscap")
test("setfflag")
test("getspecialinfo")
test("cloneref")
test("setparentinternal")
test("addchildinternal")
test("isluau")
test("run_secure")
test("getnetworkmode")
test("setnetworkmode")

Print("Scripts")

test("getgc")
test("getgenv")
test("getloadedmodules")
test("getrenv")
test("getrunningscripts")
test("getscriptbytecode")
test("getscripthash")
test("getscripts")
test("getsenv")
test("getregistry")
test("getthreadidentity")
test("setthreadidentity")
test("getfenv")
test("setfenv")

Print("Drawing")

test("Drawing")
test("Drawing.new")
test("Drawing.Fonts")
test("Drawing.clear")
test("isrenderobj")
test("getrenderproperty")
test("setrenderproperty")
test("cleardrawcache")
test("WebSocket")
test("WebSocket.connect")

Print("Http")

test("game:httpGet")
test("game:HttpGetAsync")
test("game.HttpGetAsync")
test("game.httpGet")

Print("Instance Saving")

test("saveinstance")
test("decompile")

Print("Other")

test("game")
test("Game")
test("clonefunction")
test("getcallbackmember")
test("restorefunction")
test("isfunctionhooked")
test("firesignal")
test("require")
test("getallthreads")
test("getfpscap")
test("fireproximityprompt")
test("firetouchtransmitter")
test("getproperties")
test("gethiddenproperties")
test("getexecutioncontext")
test("protect_gui")
test("securecall")
test("emulate_call")
test("writecustomasset")
test("rawget")
test("unprotect_gui")
test("firetouchinterest")
test("setsimulationradius")
test("getthreadcontext")
test("setthreadcontext")
test("getmoduleunlocked")
test("setmoduleunlocked")
test("run_auto_execute_scripts")
test("run_teleport_queue_scripts")
test("assign_socket")
test("send_socket")
test("close_socket")

Print("FPS")

local renderStepped = game:GetService("RunService").RenderStepped
local function GetFPS() 
    renderStepped:Wait() 
    local Value = 0 
    for _ = 1, 5 do 
        Value += 1 / renderStepped:Wait() 
    end 
    return math.round(Value / 5) 
end
print("FPS: " ..GetFPS().. "/60")

local rate = math.round(passes / (passes + fails) * 100)
local outOf = passes .. " out of " .. (passes + fails)

print("\n")

print("UNC Summary Executor")
print("✅ Tested with a " .. rate .. "% success rate (" .. outOf .. ")")
print("⛔ " .. fails .. " tests failed")
